!function(t) {
    "function" == typeof define && define.amd ? define(t) : t()
}((function() {
    "use strict";
    function t(t, e) {
        if (!(t instanceof e))
            throw new TypeError("Cannot call a class as a function")
    }
    function e(t, e) {
        for (var n = 0; n < e.length; n++) {
            var o = e[n];
            o.enumerable = o.enumerable || !1,
            o.configurable = !0,
            "value" in o && (o.writable = !0),
            Object.defineProperty(t, (r = o.key, i = void 0, "symbol" == typeof (i = function(t, e) {
                if ("object" != typeof t || null === t)
                    return t;
                var n = t[Symbol.toPrimitive];
                if (void 0 !== n) {
                    var o = n.call(t, e || "default");
                    if ("object" != typeof o)
                        return o;
                    throw new TypeError("@@toPrimitive must return a primitive value.")
                }
                return ("string" === e ? String : Number)(t)
            }(r, "string")) ? i : String(i)), o)
        }
        var r,
            i
    }
    function n(t, n, o) {
        return n && e(t.prototype, n), o && e(t, o), Object.defineProperty(t, "prototype", {
            writable: !1
        }), t
    }
    var o = function() {
            function e() {
                var n = this;
                t(this, e),
                setTimeout((function() {
                    n.initializeLogo()
                }), 600)
            }
            return n(e, [{
                key: "initializeIntroText",
                value: function() {
                    var t = document.querySelector(".intro-animation").querySelectorAll("span"),
                        e = 0;
                    t.forEach((function(t, n) {
                        setTimeout((function() {
                            t.classList.add("visible")
                        }), e),
                        setTimeout((function() {
                            t.classList.remove("visible")
                        }), e + 150),
                        e += 150
                    }))
                }
            }, {
                key: "initializeLogo",
                value: function() {
                    function t() {
                        fetch("https://humantechnology.softgoods.org/sensor-values.json").then((function(t) {
                            return t.text()
                        })).then((function(r) {
                            var i = JSON.parse(r);
                            i.temperatureValue,
                            i.humidityValue,
                            i.lightValue,
                            i.pressureValue,
                            i.potentiometerValue,
                            i.soundValue;
                            for (var a = i.buttonArray.reverse(), s = document.querySelectorAll(".interaction .day"), c = 0; c < s.length; c++) {
                                if (s[c].setAttribute("data-value", a[c]), a[c] < 3)
                                    var l = 1;
                                else if (a[c] < 6)
                                    l = 2;
                                else if (a[c] < 15)
                                    l = 3;
                                else
                                    l = 4;
                                s[c].setAttribute("data-size", l),
                                0 != a[c] && s[c].classList.add("had-button")
                            }
                            for (var u = i.movementArray.reverse(), d = document.querySelectorAll(".movement .day"), m = 0; m < d.length; m++) {
                                if (d[m].setAttribute("data-value", u[m]), u[m] < 10)
                                    l = 1;
                                else if (u[m] < 100)
                                    l = 2;
                                else
                                    l = 3;
                                d[m].setAttribute("data-size", l),
                                0 != u[m] && d[m].classList.add("had-movement")
                            }
                            var f = new Date(1e3 * i.lastUpdate),
                                h = f.toLocaleString("en-US", {
                                    timeZone: "America/New_York",
                                    day: "2-digit",
                                    month: "2-digit",
                                    year: "2-digit"
                                });
                            f.toLocaleString("en-US", {
                                timeZone: "America/New_York",
                                hour: "2-digit",
                                minute: "2-digit",
                                second: "2-digit",
                                hour12: !1
                            });
                            var v = h.split("/");
                            h = v[0] + "·" + v[1] + "·" + v[2],
                            function() {
                                var e = 60;
                                document.querySelector(".next-update");
                                var n = setInterval((function() {
                                    --e >= 0 || (clearInterval(n), t(), o())
                                }), 1e3)
                            }(),
                            console.log("Got sensor values"),
                            function(t) {
                                var o = function(t) {
                                        var e;
                                        e = t >= 15 && t <= 25 ? -.01 * Math.pow(t - 20, 2) + 1 : t > 25 && t <= 35 ? .75 * Math.pow((35 - t) / 10, .8) : t >= 0 && t < 15 ? .75 * Math.pow((t - 0) / 15, .8) : 0;
                                        return e
                                    }(t.temperatureValue),
                                    r = function(t) {
                                        var e;
                                        e = t >= 1003.25 && t <= 1023.25 ? -1 / 400 * Math.pow(t - 1013.25, 2) + 1 : t > 1023.25 && t <= 1030 ? .75 * Math.pow((1030 - t) / 6.75, .8) : t >= 995 && t < 1003.25 ? .75 * Math.pow((t - 995) / 8.25, .8) : 0;
                                        return e
                                    }(t.pressureValue),
                                    i = function(t) {
                                        var e;
                                        e = t >= 40 && t <= 60 ? -1 / 400 * Math.pow(t - 50, 2) + 1 : t > 60 && t <= 80 ? .75 * Math.pow((80 - t) / 20, .8) : t >= 20 && t < 40 ? .75 * Math.pow((t - 20) / 20, .8) : 0;
                                        return e
                                    }(t.humidityValue),
                                    a = function(t) {
                                        var e;
                                        e = t >= 40 && t <= 100 ? -1 / 60 * t + 5 / 3 : t < 40 ? 1 : 0;
                                        return e
                                    }(t.soundValue),
                                    s = function(t, e) {
                                        var n,
                                            o = new Date(1e3 * e),
                                            r = o.getUTCHours();
                                        n = r >= 8 && r <= 21 ? t <= 760 ? t / 760 : 1 : t > 300 ? 0 : 1 - t / 300;
                                        return n
                                    }(t.lightValue, 1688547195),
                                    c = function(t) {
                                        var e = t.reduce((function(t, e) {
                                                return t + e
                                            }), 0),
                                            n = e >= 200 ? 1 : e / 200;
                                        n > 1 && (n = 1);
                                        return n
                                    }(t.movementArray),
                                    l = function(t) {
                                        var e = t.reduce((function(t, e) {
                                                return t + e
                                            }), 0),
                                            n = e >= 200 ? 1 : e / 200;
                                        n > 1 && (n = 1);
                                        return n
                                    }(t.buttonArray),
                                    u = function(t, e, n, o, r, i, a) {
                                        var s = (.15 * t + .15 * e + .15 * n + .15 * o + .15 * r + .15 * i + .1 * a) / 1;
                                        return document.querySelector(".browser-mood").textContent = "[ Mood " + function(t) {
                                            if (t < 0 || t > 1)
                                                throw new Error("Number must be between 0 and 1");
                                            var e = Math.floor(675 * t),
                                                n = String.fromCharCode(65 + e % 26),
                                                o = String.fromCharCode(65 + Math.floor(e / 26)),
                                                r = Math.floor(9 * t);
                                            return "".concat(o).concat(n, "-").concat(r)
                                        }(s.toFixed(2)) + " ]", s
                                    }(o, r, i, a, s, c, l),
                                    d = "ArtLex",
                                    m = e(u, t.lastUpdate, d.length, d);
                                n(d, m, ".logo-type")
                            }(i)
                        })).catch((function(t) {
                            console.error("Error getting sensor values:", t)
                        }))
                    }
                    function e(t, e, n, o) {
                        for (var r, i = [], a = Math.floor(e / 60), s = a % o.length, c = (r = a, function() {
                                return (2147483647 & (r = 0 | Math.imul(48271, r))) / 2147483648
                            }), l = 0; l < n; l++) {
                            var u = 35 + 85 * c() + 85 * (1 - t) * c(),
                                d = Math.max(35, Math.min(120, u)),
                                m = (d - 35) / 85 * -140 + 530 + 40;
                            i[(l + s) % o.length] = {
                                width: d,
                                weight: m
                            }
                        }
                        return i
                    }
                    function n(t, e, n, o) {
                        document.querySelectorAll(n).forEach((function(n) {
                            var r = n.classList.contains("logo") ? 0 : 40;
                            Array.from({
                                length: t.length
                            }, (function(t, e) {
                                return e
                            })).forEach((function(t, i) {
                                setTimeout((function() {
                                    var o = n.children[t];
                                    o.classList.add("visible-logo-letter"),
                                    o.style.fontVariationSettings = "'wdth' ".concat(e[t].width, ", 'wght' ").concat(e[t].weight - r)
                                }), o ? 200 * i : 0),
                                setTimeout((function() {
                                    document.body.classList.add("logo-shown")
                                }), 1800)
                            }))
                        }))
                    }
                    function o() {
                        fetch("https://humantechnology.softgoods.org/digital-values.json").then((function(t) {
                            return t.text()
                        })).then((function(t) {
                            var e = JSON.parse(t);
                            e.scrollTotal,
                            e.visitTotal,
                            e.moveTotal,
                            e.clickTotal,
                            console.log("Got digital values")
                        })).catch((function(t) {
                            console.error("Error getting digital values:", t)
                        }))
                    }
                    var r,
                        i = {
                            x: 0,
                            y: 0
                        };
                    window.addEventListener("scroll", (function() {
                        window.pageYOffset || document.documentElement.scrollTop
                    })),
                    window.addEventListener("click", (function() {})),
                    window.addEventListener("mousemove", (function(t) {
                        Math.sqrt(Math.pow(t.clientX - i.x, 2) + Math.pow(t.clientY - i.y, 2)),
                        i = {
                            x: t.clientX,
                            y: t.clientY
                        }
                    })),
                    setTimeout((function() {
                        t(),
                        o()
                    }), 5e3),
                    n(r = "ArtLex", e(.85, document.body.dataset.timestamp, 9, r), ".logo-type", !0)
                }
            }]), e
        }(),
        r = function() {
            function e() {
                t(this, e),
                this.isMobile = window.innerWidth <= 768,
                this.mode = "stack",
                this.viewTransitionTimeout = 0,
                this.panningRAF = null,
                this.targetPanX = 0,
                this.targetPanY = 0,
                this.currentPanX = 0,
                this.currentPanY = 0,
                this.stackInterval = 120,
                this.closeMenuTimeout = 0,
                this.menuOpenHeight = this.getActualHeight(document.querySelector(".browser-contents-container")),
                this.initializeInterface()
            }
            return n(e, [{
                key: "resetInterface",
                value: function() {
                    document.querySelectorAll(".current-collection .list-fragment").forEach((function(t) {
                        t.classList.remove("visible")
                    }));
                    var t = document.querySelector(".current-collection .fragments-inner-container");
                    t.style.width = "",
                    t.style.height = "",
                    t.style.transform = "",
                    t.style.padding = "",
                    document.querySelectorAll(".current-collection .fragment").forEach((function(t) {
                        t.classList.remove("transition-scatter", "transition-scatter-outwards", "transition-stack", "transition-stack-outwards", "transition-index"),
                        t.style.transform = "",
                        t.style.left = "",
                        t.style.top = ""
                    })),
                    document.querySelectorAll(".list-filters").forEach((function(t, e) {
                        t.querySelectorAll("li").forEach((function(t, e) {
                            t.classList.remove("visible"),
                            0 === e && t.querySelector("button").classList.add("active-filter")
                        }))
                    })),
                    document.querySelectorAll(".list-fragment").forEach((function(t) {
                        t.classList.remove("list-fragment-inactive")
                    })),
                    this.closeFragment(0)
                }
            }, {
                key: "setMode",
                value: function(t) {
                    this.mode = t,
                    document.body.classList.remove("view-stack", "view-scatter", "view-index"),
                    document.body.classList.add("view-" + t)
                }
            }, {
                key: "initializeInterface",
                value: function() {
                    var t = this;
                    /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && document.body.classList.add("browser-safari"),
                    document.addEventListener("mousemove", this.startPanningMousemove.bind(this)),
                    document.querySelector(".browser-title").addEventListener("click", this.toggleMenu.bind(this)),
                    document.querySelector(".browser-menu-button").addEventListener("click", this.toggleMenu.bind(this)),
                    document.querySelector(".browser-menu-button").addEventListener("mouseenter", this.toggleTitle.bind(this)),
                    document.querySelector(".browser-menu-button").addEventListener("mouseleave", this.toggleTitle.bind(this)),
                    document.querySelector(".browser-title-site").addEventListener("click", this.openHome.bind(this)),
                    document.querySelector(".browser-close").addEventListener("mouseenter", this.toggleTitle.bind(this)),
                    document.querySelector(".browser-close").addEventListener("mouseleave", this.toggleTitle.bind(this)),
                    document.querySelector(".browser-about").addEventListener("mouseenter", this.toggleTitle.bind(this)),
                    document.querySelector(".browser-about").addEventListener("mouseleave", this.toggleTitle.bind(this)),
                    document.querySelector(".page-cover-menu").addEventListener("mouseenter", this.toggleMenu.bind(this)),
                    document.querySelector(".browser-controls-container").addEventListener("mouseenter", (function() {
                        clearTimeout(t.closeMenuTimeout)
                    })),
                    document.querySelectorAll(".browser-arrow").forEach((function(e) {
                        e.addEventListener("mouseenter", t.toggleTitle.bind(t)),
                        e.addEventListener("mouseleave", t.toggleTitle.bind(t))
                    })),
                    document.querySelectorAll(".view-button").forEach((function(e) {
                        e.addEventListener("click", (function(n) {
                            e.closest(".view-controls-container").classList.remove("state-1", "state-2", "state-3"),
                            t.updateViewMarker(e);
                            var o = new URL(window.location.href),
                                r = new URLSearchParams(o.search);
                            e.classList.contains("view-button-index") ? (t.viewIndex(), e.closest(".view-controls-container").classList.add("state-1"), r.set("view", "index")) : e.classList.contains("view-button-stack") ? (t.viewStack(), e.closest(".view-controls-container").classList.add("state-2"), r.set("view", "stack")) : e.classList.contains("view-button-scatter") && (t.viewScatter(), e.closest(".view-controls-container").classList.add("state-3"), r.set("view", "scatter")),
                            o.search = r.toString(),
                            t.updateAddressBar(o.href, "", !0)
                        }))
                    })),
                    document.querySelectorAll(".filter-button").forEach((function(e) {
                        e.addEventListener("click", (function(n) {
                            t.updateViewMarker(e),
                            e.classList.contains("filter-button-i") ? t.filterFragments("input") : e.classList.contains("filter-button-io") ? t.filterFragments() : e.classList.contains("filter-button-o") && t.filterFragments("output")
                        }))
                    })),
                    this.initializeControlsBrowser(!0),
                    this.initializeFragmentEvents(),
                    this.initializeListEvents(),
                    this.handlePopState(),
                    document.querySelector(".browser-time"),
                    setInterval((function() {
                        var t = new Date,
                            e = t.getTimezoneOffset();
                        t.setMinutes(t.getMinutes() + -240 - e),
                        t.toISOString().substr(2, 8).replace(/-/g, " "),
                        t.toISOString().substr(11, 5)
                    }), 1e3),
                    document.body.classList.contains("page-open") ? document.querySelector(".article-container").addEventListener("click", (function(e) {
                        e.target.matches(".article-container") && t.closePage()
                    })) : this.preventInterference();
                    var e = document.body.classList.contains("internal-refer") ? 0 : 2e3;
                    setTimeout((function() {
                        var e = new URLSearchParams(window.location.search).get("view");
                        "index" !== e || t.isMobile ? "scatter" !== e || t.isMobile ? ("stack" !== e || t.isMobile, t.viewStack(!0), t.updateViewMarker(document.querySelector('.view-button[data-view="stack"]'))) : (t.viewScatter(), document.body.classList.add("show-controls"), t.updateViewMarker(document.querySelector('.view-button[data-view="scatter"]'))) : (t.viewIndex(), document.body.classList.add("show-controls"), t.updateViewMarker(document.querySelector('.view-button[data-view="index"]')));
                        var n = t.isMobile ? 0 : document.querySelectorAll(".current-collection .fragment").length * t.stackInterval + 800;
                        setTimeout((function() {
                            document.body.classList.add("show-controls")
                        }), n)
                    }), e)
                }
            }, {
                key: "updateViewMarker",
                value: function(t) {
                    var e = t.closest(".controls-options"),
                        n = t.offsetLeft + t.offsetWidth / 2;
                    e.querySelector(".view-marker").style.left = "".concat(n, "px")
                }
            }, {
                key: "filterFragments",
                value: function() {
                    var t = this,
                        e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                    document.body.classList.remove("filter-input", "filter-output"),
                    this.isMobile ? (document.querySelector(".current-collection").classList.add("filter-mobile-transition"), setTimeout((function() {
                        document.querySelectorAll(".current-collection .fragment").forEach((function(t) {
                            t.classList.remove("visible")
                        }));
                        var n = null;
                        n = "input" === e ? document.querySelectorAll(".current-collection .fragment.fragment-state-input, .current-collection .fragment-about") : "output" === e ? document.querySelectorAll(".current-collection .fragment.fragment-state-output, .current-collection .fragment-about") : document.querySelectorAll(".current-collection .fragment"),
                        t.initializeMobile(n),
                        setTimeout((function() {
                            document.querySelector(".current-collection").classList.remove("filter-mobile-transition")
                        }), 300)
                    }), 300)) : e && document.body.classList.add("filter-" + e)
                }
            }, {
                key: "handlePopState",
                value: function() {
                    history.replaceState({
                        page: "initialPage"
                    }, "Initial Page", window.location.href),
                    window.addEventListener("popstate", (function(t) {
                        t.state && (window.location.href = window.location.href)
                    })),
                    window.onpageshow = function(t) {
                        t.persisted && window.location.reload()
                    }
                }
            }, {
                key: "updateAddressBar",
                value: function(t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "ArtLex",
                        n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                    "function" == typeof history.pushState && (n ? history.replaceState({}, e, t) : history.pushState({}, e, t + "?view=" + this.mode))
                }
            }, {
                key: "getActualHeight",
                value: function(t) {
                    var e = t.style.overflow,
                        n = t.style.height;
                    t.style.overflow = "visible",
                    t.style.height = "auto";
                    var o = t.scrollHeight;
                    return t.style.overflow = e, t.style.height = n, o
                }
            }, {
                key: "toggleMenu",
                value: function(t) {
                    var e = this;
                    clearTimeout(this.closeMenuTimeout);
                    var n = 0;
                    n = t && document.body.classList.contains("menu-open") && t.target.classList.contains("page-cover-menu") ? 300 : 0,
                    this.closeMenuTimeout = setTimeout((function() {
                        var t = document.body.classList.contains("menu-open") ? 0 : e.menuOpenHeight;
                        document.querySelector(".browser-contents-container").style.height = t + "px",
                        document.body.classList.toggle("menu-open"),
                        document.querySelector(".browser-menu-button").dataset.title = document.body.classList.contains("menu-open") ? "Close Menu" : "Open Menu",
                        document.querySelector(".browser-title-preview").textContent = document.querySelector(".browser-menu-button").dataset.title
                    }), n)
                }
            }, {
                key: "toggleTitle",
                value: function(t) {
                    var e = "";
                    t.target.classList.contains("browser-arrow-l") ? e = "Previous — " : t.target.classList.contains("browser-arrow-r") && (e = "Next — "),
                    document.querySelector(".browser-title-preview").textContent = e + t.target.dataset.title,
                    document.body.classList.toggle("show-title-preview")
                }
            }, {
                key: "openHome",
                value: function() {
                    var t = document.body.dataset.url;
                    window.location.href = t
                }
            }, {
                key: "initializeControlsBrowser",
                value: function(t) {
                    var e = this,
                        n = document.querySelector(".browser-controls-container"),
                        o = document.querySelector(".view-controls-container"),
                        r = n.querySelector(".browser-title"),
                        i = o.querySelector(".browser-arrow-r"),
                        a = o.querySelector(".browser-arrow-l"),
                        s = null;
                    s = document.body.classList.contains("page-open") ? document.querySelector(".article") : document.querySelector(".current-collection"),
                    r.textContent = s.dataset.title,
                    i.dataset.title = s.dataset.nexttitle,
                    a.dataset.title = s.dataset.prevtitle,
                    i.setAttribute("href", s.dataset.nextlink),
                    a.setAttribute("href", s.dataset.prevlink),
                    document.querySelectorAll(".browser-contents-container a").forEach((function(t) {
                        t.href === s.dataset.link ? t.classList.add("nav-current-page") : t.classList.remove("nav-current-page")
                    })),
                    t && document.addEventListener("click", (function(t) {
                        if (t.target.matches(".browser-arrow") || t.target.matches(".collections-list a") || t.target.matches(".list-more-collections a")) {
                            var n = t.target.dataset.title;
                            document.querySelector(".browser-title").textContent = n,
                            e.openCollection(n),
                            t.preventDefault()
                        }
                        if (t.target.matches(".pages-list a") || t.target.matches(".open-about") || t.target.matches(".browser-about")) {
                            var o = t.target.getAttribute("href");
                            document.body.classList.contains("page-open") ? (e.closePage(), setTimeout((function() {
                                e.openPage(null, o)
                            }), 1e3)) : e.openPage(null, o),
                            t.preventDefault()
                        }
                        t.target.matches(".browser-close") && (document.body.classList.contains("page-open") ? e.closePage() : e.closeFragment(), t.preventDefault())
                    }))
                }
            }, {
                key: "openCollection",
                value: function(t) {
                    var e = this;
                    if (this.preventInterference(5e3), this.isMobile && document.body.classList.contains("menu-open") && (this.toggleMenu(), document.querySelector(".current-collection").classList.add("filter-mobile-transition"), setTimeout((function() {
                        document.querySelector(".current-collection").classList.remove("filter-mobile-transition")
                    }), 300)), document.body.classList.contains("page-open") && this.closePage(), "stack" === this.mode) {
                        var n = document.querySelectorAll(".current-collection .fragment");
                        this.isMobile ? (n.forEach((function(t, e) {
                            t.classList.remove("visible")
                        })), setTimeout((function() {
                            e.showNewCollection(t)
                        }), 300)) : (n.forEach((function(t, o) {
                            e.spreadStackFragments(t, o, n.length, !1, "outwards")
                        })), setTimeout((function() {
                            e.showNewCollection(t)
                        }), 60 * n.length + 1200))
                    } else if ("scatter" === this.mode)
                        this.showNewCollection(t);
                    else if ("index" === this.mode) {
                        this.showNewCollection(t),
                        document.querySelectorAll(".current-collection .fragment").forEach((function(t, e) {
                            t.classList.add("visible")
                        }))
                    }
                }
            }, {
                key: "showNewCollection",
                value: function(t) {
                    var e = this;
                    document.querySelectorAll(".current-collection").forEach((function(t) {
                        t.classList.remove("current-collection")
                    })),
                    document.querySelectorAll(".collection").forEach((function(n) {
                        n.dataset.title.includes(t) && (n.classList.add("current-collection"), "stack" === e.mode ? e.viewStack(!0) : "scatter" === e.mode ? e.viewScatter(!0) : "index" === e.mode && e.viewIndex(!0))
                    })),
                    this.initializeControlsBrowser(),
                    this.updateAddressBar(document.querySelector(".current-collection").dataset.link, "ArtLex")
                }
            }, {
                key: "preventInterference",
                value: function() {
                    document.body.classList.add("prevent-interference")
                }
            }, {
                key: "allowInterference",
                value: function() {
                    document.body.classList.remove("prevent-interference")
                }
            }, {
                key: "initializeFragmentEvents",
                value: function() {
                    var t,
                        e,
                        n = this,
                        o = !1,
                        r = null;
                    document.addEventListener("click", (function(t) {
                        var e = t.target.closest(".fragment"),
                            o = t.target.closest(".readmore");
                        if (e && e.closest(".current-collection") && o) {
                            var r = t.target.getAttribute("href");
                            n.openPage(e, r),
                            t.preventDefault()
                        }
                    })),
                    document.addEventListener("mousemove", (function(n) {
                        if (o && r) {
                            var i = n.clientX - t,
                                a = n.clientY - e,
                                s = window.getComputedStyle(r),
                                c = new DOMMatrix(s.transform);
                            r.style.transform = "matrix(".concat(c.a, ", ").concat(c.b, ", ").concat(c.c, ", ").concat(c.d, ", ").concat(c.e + i, ", ").concat(c.f + a, ")"),
                            t = n.clientX,
                            e = n.clientY
                        }
                    })),
                    document.addEventListener("mousedown", (function(i) {
                        var a = i.target.closest(".fragment");
                        a && a.closest(".current-collection") && "stack" === n.mode && (o = !0, t = i.clientX, e = i.clientY, r = a, a.classList.remove("transition-stack"))
                    })),
                    document.addEventListener("mouseup", (function(t) {
                        o = !1,
                        r = null
                    })),
                    document.addEventListener("mouseover", (function(t) {
                        if (1 === t.target.nodeType && "function" == typeof t.target.closest && !1 === n.isMobile) {
                            var e = t.target.closest(".fragment");
                            if (e && e.closest(".current-collection") && "stack" === n.mode) {
                                var o = document.querySelectorAll(".current-collection .fragment"),
                                    r = 0;
                                o.forEach((function(t) {
                                    var e = parseInt(t.dataset.zIndex);
                                    e > r && t.classList.contains("visible") && (r = e)
                                })),
                                parseInt(e.dataset.zIndex) < r && (e.style.zIndex = r + 1, e.dataset.zIndex = r + 1)
                            }
                        }
                    }))
                }
            }, {
                key: "prefetch",
                value: function(t) {
                    var e = document.createElement("link");
                    e.rel = "prefetch",
                    e.href = t,
                    document.head.appendChild(e)
                }
            }, {
                key: "initializeListEvents",
                value: function() {
                    var t = this,
                        e = [];
                    document.querySelectorAll(".list-fragment").forEach((function(t) {
                        t.addEventListener("mouseover", (function(n) {
                            var o = t.querySelector(".list-fragment-type");
                            o.textContent = o.dataset.code;
                            var r = t.closest(".list-column").dataset.column,
                                i = t.closest(".list-container"),
                                a = "0" === r ? "1" : "0",
                                s = i.querySelector('.list-column[data-column="'.concat(a, '"]')),
                                c = Array.from(s.querySelectorAll(".list-fragment")),
                                l = t.querySelector(".list-fragment-dot").getBoundingClientRect(),
                                u = i.querySelector(".list-lines-container"),
                                d = u.getBoundingClientRect(),
                                m = t.dataset.themes.split(",").map((function(t) {
                                    return t.trim()
                                })),
                                f = c.filter((function(t) {
                                    return t.dataset.themes.split(",").map((function(t) {
                                        return t.trim()
                                    })).some((function(t) {
                                        return m.includes(t)
                                    }))
                                }));
                            t.classList.add("list-fragment-current"),
                            f.forEach((function(n) {
                                var o = n.querySelector(".list-fragment-dot").getBoundingClientRect();
                                n.classList.add("list-fragment-connected");
                                var r = document.createElement("div");
                                r.classList.add("list-line"),
                                n.dataset.id === t.dataset.id && r.classList.add("same-fragment-line"),
                                r.style.top = "".concat((l.top + l.bottom) / 2 - d.top, "px"),
                                r.style.left = "".concat((l.left + l.right) / 2 - d.left, "px"),
                                r.style.width = "".concat(Math.hypot(o.left - l.left, o.top - l.top), "px"),
                                r.style.transform = "rotate(".concat(Math.atan2(o.top - l.top, o.left - l.left), "rad)");
                                var i = document.createElement("span");
                                i.classList.add("list-arrow"),
                                i.textContent = Math.random() < .5 ? "←" : "→",
                                r.appendChild(i),
                                u.appendChild(r),
                                e.push(r)
                            }))
                        })),
                        t.addEventListener("mouseleave", (function(t) {
                            var n = t.target.querySelector(".list-fragment-type");
                            n.textContent = n.dataset.type,
                            document.querySelectorAll(".list-fragment").forEach((function(t) {
                                t.classList.remove("list-fragment-connected", "list-fragment-current")
                            })),
                            e.forEach((function(t) {
                                t.style.width = "0px",
                                t.remove()
                            })),
                            e = []
                        }))
                    })),
                    document.querySelectorAll(".list-fragment").forEach((function(e) {
                        e.addEventListener("click", (function(n) {
                            var o = e.dataset.id;
                            if (e.classList.contains("list-fragment-has-article")) {
                                var r = e.dataset.url;
                                t.openPage(null, r)
                            } else
                                t.openFragment(o)
                        }))
                    }))
                }
            }, {
                key: "openFragment",
                value: function(t) {
                    var e = this,
                        n = document.createElement("div");
                    n.classList.add("list-fragment-container"),
                    document.querySelector(".current-collection .fragments-inner-container").querySelectorAll(".fragment").forEach((function(o) {
                        if (o.dataset.id === t) {
                            var r = o.cloneNode(!0),
                                i = r.querySelector("img") || r.querySelector("video");
                            if (i) {
                                e.setImageSize(i, !0);
                                var a = r.querySelector('input[type="checkbox"]');
                                a && (a.id = a.id + "clone", r.querySelector("label").setAttribute("for", a.id))
                            }
                            n.appendChild(r)
                        }
                    })),
                    document.body.appendChild(n),
                    document.body.classList.add("fragment-open"),
                    n.addEventListener("click", (function(t) {
                        t.target.matches(".list-fragment-container") && e.closeFragment()
                    }))
                }
            }, {
                key: "closeFragment",
                value: function() {
                    var t = this,
                        e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1e3;
                    document.body.classList.remove("fragment-open"),
                    document.querySelector(".list-fragment-container") && setTimeout((function() {
                        document.querySelector(".list-fragment-container").remove(),
                        t.allowInterference()
                    }), e)
                }
            }, {
                key: "openPage",
                value: function(t, e) {
                    var n = this;
                    this.preventInterference();
                    var o = t ? t.dataset.colour : null;
                    fetch(e).then((function(t) {
                        return t.text()
                    })).then((function(t) {
                        var r = (new DOMParser).parseFromString(t, "text/html").querySelector(".article-container");
                        if (r) {
                            var i = r.querySelector("article");
                            i && o && (i.style.backgroundColor = o),
                            document.body.appendChild(r),
                            document.body.classList.add("page-open"),
                            r.addEventListener("click", (function(t) {
                                t.target.matches(".article-container") && n.closePage()
                            })),
                            n.initializeControlsBrowser(),
                            n.updateAddressBar(e, "ArtLex – " + i.dataset.title)
                        }
                        n.isMobile && document.body.classList.contains("menu-open") && n.toggleMenu(),
                        n.allowInterference()
                    })).catch((function(t) {
                        console.error("Error fetching or parsing the page:", t),
                        n.allowInterference()
                    }))
                }
            }, {
                key: "closePage",
                value: function() {
                    document.body.classList.remove("page-open"),
                    this.initializeControlsBrowser(),
                    this.updateAddressBar(document.querySelector(".current-collection").dataset.link, "ArtLex"),
                    setTimeout((function() {
                        document.querySelector(".article-container").remove()
                    }), 1e3)
                }
            }, {
                key: "viewIndex",
                value: function() {
                    var t = this;
                    this.setMode("index"),
                    this.resetInterface(),
                    document.querySelectorAll(".list-container").forEach((function(t) {
                        t.scrollTop = 0
                    })),
                    document.body.classList.add("view-index");
                    var e = document.querySelectorAll(".current-collection .list-column:nth-child(1) article"),
                        n = document.querySelectorAll(".current-collection .list-column:nth-child(2) article");
                    e.forEach((function(e, o) {
                        setTimeout((function() {
                            e.classList.add("visible"),
                            t.typeLetters(e.querySelector(".list-fragment-type")),
                            n[o].classList.add("visible"),
                            t.typeLetters(n[o].querySelector(".list-fragment-type"))
                        }), 80 * o)
                    })),
                    this.allowInterference()
                }
            }, {
                key: "processFilters",
                value: function() {
                    document.querySelectorAll(".list-filters").forEach((function(t) {
                        t.querySelectorAll("li").forEach((function(t) {
                            var e = t.querySelector("button"),
                                n = t.getAttribute("data-title");
                            if (t.classList.contains("empty-filter"))
                                t.textContent = "························";
                            else {
                                for (var o = n.substring(0, 24); o.length < 24;)
                                    o += "·";
                                e.textContent = o,
                                e.dataset.title = n
                            }
                        }))
                    }))
                }
            }, {
                key: "viewStack",
                value: function() {
                    var t = this,
                        e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    this.setMode("stack");
                    var n = document.querySelectorAll(".current-collection .fragment"),
                        o = n.length,
                        r = 0;
                    n.forEach((function(e) {
                        var n;
                        e.classList.contains("fragment-pinned") ? n = o + 100 : (n = r, r++),
                        e.style.zIndex = n,
                        e.dataset.zIndex = n;
                        var i = e.querySelector("img") || e.querySelector("video");
                        i && t.setImageSize(i)
                    }));
                    var i = Array.from(n).sort((function(t, e) {
                            return parseInt(t.style.zIndex, 10) - parseInt(e.style.zIndex, 10)
                        })),
                        a = n[0].parentElement;
                    if (i.forEach((function(t) {
                        a.appendChild(t)
                    })), n = document.querySelectorAll(".current-collection .fragment"), this.isMobile) {
                        var s = 1;
                        n.forEach((function(t) {
                            var e = 6 * Math.random() - 3;
                            s = 1 === s ? -1 : 1;
                            var n = 100 * Math.random() * s,
                                o = 50 * Math.random() * s;
                            t.querySelector(".fragment-container").style.transform = "rotate(".concat(e, "deg) translate(").concat(o, "px, ").concat(n, "px)")
                        })),
                        this.initializeMobile(n),
                        this.allowInterference()
                    } else
                        this.resetInterface(),
                        r = 0,
                        n.forEach((function(o) {
                            r += 1;
                            var i = 4 * Math.random() - 2;
                            o.style.transform = "translate(-50%,-50%) rotate(".concat(i, "deg)"),
                            e || (e = !document.querySelector(".current-collection").classList.contains("fragments-spread")),
                            t.spreadStackFragments(o, r, n.length, e, "inwards")
                        }))
                }
            }, {
                key: "initializeMobile",
                value: function(t) {
                    function e(e) {
                        var n = Array.from(t).sort((function(t, e) {
                                return parseInt(t.style.zIndex, 10) - parseInt(e.style.zIndex, 10)
                            })),
                            o = n.length;
                        if (n.forEach((function(t, e) {
                            var n = 1 - .15 * (o - 1 - e);
                            e === o - 1 ? (t.style.transform = "scale(1)", t.classList.add("frontmost-fragment"), t.querySelector(".fragment-container").style.transform = "rotate(0deg)") : (t.classList.remove("frontmost-fragment"), t.style.transform = "scale(".concat(Math.max(n, 0), ")"))
                        })), e) {
                            var r = n.length,
                                i = r > 8 ? r - 8 : 0,
                                a = [240, 360, 500, 700];
                            n.forEach((function(t, e) {
                                var n;
                                n = e < i ? 0 : e >= r - 4 ? a[e + 4 - r] : 160 * (e - i),
                                setTimeout((function() {
                                    t.classList.add("visible")
                                }), n)
                            }))
                        }
                    }
                    t = t || document.querySelectorAll(".current-collection .fragment"),
                    e(!0),
                    t.forEach((function(n) {
                        var o = new Hammer(n);
                        o.on("pan", (function(t) {
                            var e = t.target;
                            if (t.target.classList.contains("frontmost-fragment") && (e.classList.add("moving"), 0 !== t.deltaX && (0 !== t.center.x || 0 !== t.center.y))) {
                                var n = .03 * t.deltaX * (t.deltaY / 80);
                                e.style.transform = "translate(" + t.deltaX + "px, " + t.deltaY + "px) rotate(" + n + "deg)"
                            }
                        })),
                        o.on("panend", (function(n) {
                            var o = n.target;
                            if (n.target.classList.contains("frontmost-fragment")) {
                                o.classList.remove("moving");
                                var r = document.body.clientWidth,
                                    i = Math.abs(n.deltaX) < 65 || Math.abs(n.velocityX) < .5;
                                if (o.classList.toggle("removed", !i), i)
                                    o.style.transform = "";
                                else {
                                    var a = Math.max(Math.abs(n.velocityX) * r, r),
                                        s = n.deltaX > 0 ? a : -a,
                                        c = Math.abs(n.velocityY) * r,
                                        l = n.deltaY > 0 ? c : -c,
                                        u = .03 * n.deltaX * (n.deltaY / 80);
                                    o.style.transform = "translate(" + s + "px, " + (l + n.deltaY) + "px) rotate(" + u + "deg)",
                                    setTimeout((function() {
                                        var n = Number.MAX_VALUE;
                                        t.forEach((function(t) {
                                            var e = parseInt(t.style.zIndex, 10);
                                            t.style.zIndex = e + 10,
                                            e < n && (n = e)
                                        })),
                                        o.style.transform = "",
                                        o.style.zIndex = n - 1,
                                        setTimeout((function() {
                                            o.classList.remove("removed")
                                        }), 300),
                                        e()
                                    }), 200)
                                }
                            }
                        }))
                    }))
                }
            }, {
                key: "viewScatter",
                value: function() {
                    var t = this;
                    this.setMode("scatter"),
                    this.resetInterface(),
                    document.querySelector(".current-collection .fragments-container");
                    var e = document.querySelector(".current-collection .fragments-inner-container"),
                        n = document.querySelectorAll(".current-collection .fragment"),
                        o = 50;
                    e.style.height = 1.5 * window.innerHeight + "px",
                    e.style.paddingLeft = "50px",
                    e.style.paddingTop = "50px",
                    n.forEach((function(e) {
                        var n = e.querySelector("img") || e.querySelector("video");
                        n && t.setImageSize(n),
                        e.style.marginTop = "50px",
                        e.style.marginRight = "50px",
                        e.style.marginBottom = "50px",
                        e.style.marginLeft = "50px"
                    })),
                    new Packery(".current-collection .fragments-inner-container", {
                        itemSelector: ".fragment",
                        containerStyle: null,
                        transitionDuration: 0,
                        horizontal: !0,
                        resize: !1,
                        initLayout: !1
                    }).layout();
                    var r = window.innerWidth,
                        i = window.innerHeight;
                    n.forEach((function(t) {
                        var e = t.getBoundingClientRect();
                        r = Math.max(r, e.right) > r ? Math.max(r, e.right) + o : r,
                        i = Math.max(i, e.bottom) > i ? Math.max(i, e.bottom) + o : i
                    })),
                    e.style.width = r + o + "px",
                    e.style.height = i + o + "px";
                    var a = this.clientX / window.innerWidth,
                        s = this.clientY / window.innerHeight;
                    this.currentPanX = (e.clientWidth - window.innerWidth) * a,
                    this.currentPanY = (e.clientHeight - window.innerHeight) * s,
                    this.targetPanX = this.currentPanX,
                    this.targetPanY = this.currentPanY,
                    e.style.transform = "translate(".concat(-this.currentPanX, "px, ").concat(-this.currentPanY, "px)"),
                    setTimeout((function() {
                        t.stopPanningTicker(),
                        t.panningTicker(e)
                    }), 1),
                    n.forEach((function(e, o) {
                        e.classList.add("visible"),
                        t.spreadScatterFragments(e, o, n.length, "inwards")
                    }))
                }
            }, {
                key: "spreadStackFragments",
                value: function(t, e, n, o, r) {
                    var i,
                        a,
                        s,
                        c,
                        l = this;
                    "outwards" === r ? (i = 80, a = 91, s = 70, c = 81) : "inwards" === r && (i = 15, a = 30, s = 5, c = 15);
                    var u = 2 * Math.random() * Math.PI,
                        d = i + Math.random() * (a - i),
                        m = s + Math.random() * (c - s),
                        f = d * Math.cos(u),
                        h = m * Math.sin(u),
                        v = "".concat(f, "%"),
                        g = "".concat(h, "%"),
                        y = o ? .75 * window.innerWidth : 100,
                        p = y * Math.cos(u),
                        w = y * Math.sin(u);
                    ("outwards" === r || "inwards" === r && (t.style.marginLeft = "calc(".concat(v, " + ").concat(p, "px)"), t.style.marginTop = "calc(".concat(g, " + ").concat(w, "px)")), o) ? setTimeout((function() {
                        t.classList.add("transition-stack", "visible"),
                        v && (t.style.marginLeft = v, t.style.marginTop = g),
                        e === n && setTimeout((function() {
                            l.allowInterference()
                        }), 1e3)
                    }), e * this.stackInterval) : setTimeout((function() {
                        t.classList.add("transition-stack"),
                        "outwards" === r && t.classList.add("transition-stack-outwards"),
                        t.style.marginLeft = v,
                        t.style.marginTop = g
                    }), "outwards" === r ? 60 * e : 0);
                    document.querySelector(".current-collection").classList.add("fragments-spread")
                }
            }, {
                key: "spreadScatterFragments",
                value: function(t, e, n, o) {
                    var r = this,
                        i = window.innerWidth / 2,
                        a = window.innerHeight / 2,
                        s = parseFloat(t.style.left),
                        c = parseFloat(t.style.top),
                        l = i - (t.getBoundingClientRect().left + t.offsetWidth / 2) < 0 ? -1 : 1,
                        u = a - (t.getBoundingClientRect().top + t.offsetHeight / 2) < 0 ? -1 : 1;
                    t.style.left = s + 20 * l + "px",
                    t.style.top = c + 20 * u + "px",
                    setTimeout((function() {
                        t.classList.add("transition-scatter"),
                        t.style.left = s + "px",
                        t.style.top = c + "px",
                        e + 1 === n && setTimeout((function() {
                            r.allowInterference()
                        }), 200)
                    }), 1),
                    document.querySelector(".current-collection").classList.add("fragments-spread")
                }
            }, {
                key: "panningTicker",
                value: function(t) {
                    var e = this;
                    function n(t) {
                        return 1 - Math.pow(1 - t, 3)
                    }
                    isNaN(this.currentPanY) && (this.currentPanY = 0),
                    isNaN(this.currentPanX) && (this.currentPanX = 0);
                    var o = this.targetPanX - this.currentPanX,
                        r = this.targetPanY - this.currentPanY;
                    this.currentPanX += o * n(.02),
                    this.currentPanY += r * n(.02),
                    "scatter" === this.mode && (t.style.transform = "translate(".concat(-this.currentPanX, "px, ").concat(-this.currentPanY, "px)")),
                    this.panningRAF = requestAnimationFrame((function() {
                        return e.panningTicker(t)
                    }))
                }
            }, {
                key: "startPanningMousemove",
                value: function(t) {
                    this.clientX = t.clientX,
                    this.clientY = t.clientY;
                    var e = document.querySelector(".current-collection .fragments-inner-container"),
                        n = e.clientWidth,
                        o = e.clientHeight,
                        r = this.clientX / window.innerWidth,
                        i = this.clientY / window.innerHeight;
                    this.targetPanX = (n - window.innerWidth) * r,
                    this.targetPanY = (o - window.innerHeight) * i
                }
            }, {
                key: "stopPanningTicker",
                value: function() {
                    cancelAnimationFrame(this.panningRAF)
                }
            }, {
                key: "setImageSize",
                value: function(t, e, n, o) {
                    var r,
                        i,
                        a = t.closest(".fragment-container"),
                        s = window.innerHeight,
                        c = window.innerWidth;
                    "VIDEO" === t.tagName ? t.onloadedmetadata = function() {
                        r = n || t.videoWidth,
                        i = o || t.videoHeight,
                        t.setAttribute("width", r),
                        t.setAttribute("height", i)
                    } : (r = parseInt(t.getAttribute("width")), i = parseInt(t.getAttribute("height")));
                    var l = r / i;
                    if (this.isMobile) {
                        var u = window.innerWidth - 60;
                        a.style.width = "".concat(u, "px"),
                        a.style.height = "".concat(u / l, "px")
                    } else if (i > r) {
                        var d = .3 * s,
                            m = .4 * s,
                            f = e ? .5 * s : d + Math.random() * (m - d),
                            h = f > i ? i : f;
                        a.style.height = "".concat(h, "px"),
                        a.style.width = "".concat(h * l, "px")
                    } else if (i === r) {
                        var v = .2 * s,
                            g = .3 * s,
                            y = e ? .5 * s : v + Math.random() * (g - v),
                            p = y > i ? i : y;
                        a.style.height = "".concat(p, "px"),
                        a.style.width = "".concat(p, "px")
                    } else {
                        var w = .15 * c,
                            b = .25 * c,
                            S = e ? .4 * c : w + Math.random() * (b - w),
                            L = S > r ? r : S;
                        a.style.width = "".concat(L, "px"),
                        a.style.height = "".concat(L / l, "px")
                    }
                    a.dataset.aspectRatio = l
                }
            }, {
                key: "customEaseOut",
                value: function(t) {
                    return t + .2 * Math.sin(t * Math.PI / 2)
                }
            }, {
                key: "hideFragments",
                value: function(t) {
                    var e = Array.from(document.querySelectorAll(".current-collection .fragment"));
                    e.sort((function(t, e) {
                        return parseInt(window.getComputedStyle(e).zIndex) - parseInt(window.getComputedStyle(t).zIndex)
                    }));
                    var n = e.map((function(t, n) {
                        return new Promise((function(o) {
                            var r = n / (e.length - 1);
                            setTimeout((function() {
                                t.classList.add("invisible"),
                                setTimeout((function() {
                                    t.classList.remove("visible"),
                                    t.classList.remove("invisible"),
                                    o()
                                }), 400)
                            }), 400 * r)
                        }))
                    }));
                    Promise.all(n).then((function() {
                        t && "function" == typeof t && t()
                    }))
                }
            }, {
                key: "typeWords",
                value: function(t, e) {
                    t.classList.remove("hide-words");
                    var n = t,
                        o = n.textContent.split(/\s+/);
                    n.innerHTML = o.map((function(t) {
                        return '<span class="split-word">'.concat(t, " </span>")
                    })).join("");
                    var r = n.querySelectorAll(".split-word"),
                        i = 0;
                    !function t() {
                        if (i < r.length) {
                            var n = r[i];
                            setTimeout((function() {
                                n.classList.add("visible-word")
                            }), 0),
                            i++,
                            setTimeout(t, 60)
                        } else
                            e && "function" == typeof e && e()
                    }()
                }
            }, {
                key: "typeLetters",
                value: function(t, e) {
                    t.classList.remove("hide-letters");
                    var n = t,
                        o = n.textContent.split("");
                    n.innerHTML = o.map((function(t) {
                        return '<span class="split-letter">'.concat(t, "</span>")
                    })).join("");
                    var r = n.querySelectorAll(".split-letter"),
                        i = 0;
                    !function t() {
                        if (i < r.length) {
                            var n = r[i];
                            setTimeout((function() {
                                n.classList.add("visible-letter")
                            }), 0),
                            i++,
                            setTimeout(t, 30)
                        } else
                            e && "function" == typeof e && e()
                    }()
                }
            }]), e
        }();
    new o,
    new r
}));
//# sourceMappingURL=app.min.js.map
